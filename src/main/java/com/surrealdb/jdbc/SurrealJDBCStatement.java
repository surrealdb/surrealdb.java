package com.surrealdb.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class SurrealJDBCStatement implements Statement {
    @Override
    public ResultSet executeQuery(final String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int executeUpdate(final String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void close() {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getMaxFieldSize() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setMaxFieldSize(final int max) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getMaxRows() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setMaxRows(final int max) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setEscapeProcessing(final boolean enable) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getQueryTimeout() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setQueryTimeout(final int seconds) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void cancel() {
        throw new UnsupportedOperationException();
    }

    @Override
    public SQLWarning getWarnings() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void clearWarnings() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setCursorName(final String name) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean execute(final String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public ResultSet getResultSet() {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getUpdateCount() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean getMoreResults() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setFetchDirection(final int direction) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getFetchDirection() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setFetchSize(final int rows) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getFetchSize() {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getResultSetConcurrency() {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getResultSetType() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void addBatch(final String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void clearBatch() {
        throw new UnsupportedOperationException();
    }

    @Override
    public int[] executeBatch() {
        throw new UnsupportedOperationException();
    }

    @Override
    public Connection getConnection() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean getMoreResults(final int current) {
        throw new UnsupportedOperationException();
    }

    @Override
    public ResultSet getGeneratedKeys() {
        throw new UnsupportedOperationException();
    }

    @Override
    public int executeUpdate(final String sql, final int autoGeneratedKeys) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int executeUpdate(final String sql, final int[] columnIndexes) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int executeUpdate(final String sql, final String[] columnNames) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean execute(final String sql, final int autoGeneratedKeys) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean execute(final String sql, final int[] columnIndexes) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean execute(final String sql, final String[] columnNames) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getResultSetHoldability() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isClosed() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void setPoolable(final boolean poolable) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isPoolable() {
        throw new UnsupportedOperationException();
    }

    @Override
    public void closeOnCompletion() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isCloseOnCompletion() {
        throw new UnsupportedOperationException();
    }

    @Override
    public <T> T unwrap(final Class<T> iface) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isWrapperFor(final Class<?> iface) {
        throw new UnsupportedOperationException();
    }
}
