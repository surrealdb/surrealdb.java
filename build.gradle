plugins {
    id 'java'
    id 'jacoco'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'com.surrealdb'
version '1.0.0-beta.1'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    integrationTest {
        java
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

ext.nativeJar = file("native/surrealdb-${version}.jar")

// Fail fast, but only when the task graph contains a task that needs the file
gradle.taskGraph.whenReady { graph ->
    boolean needsNativeJar = graph.allTasks.any { t ->
                t.name in ['publish', 'publishToMavenLocal'] ||
                      (t.name.startsWith('generate') && t.name.endsWith('Publication'))
    }



    if (needsNativeJar && !nativeJar.exists()) {
               throw new GradleException(
                            "Native JAR not found at '${nativeJar}'. " +
                                    "Build/copy it to native/ before running publishing tasks."
               )
    }
}



// ---------------------------------------------------------------------------
// 2. Task that stages (copies) the external JAR into build/libs
// ---------------------------------------------------------------------------
tasks.register('stageNativeJar', Copy) {
    description = 'Copies the externally built JAR (with native libs) into build/libs.'
    group       = 'build'

    from nativeJar
    into "$buildDir/libs"
    rename { "surrealdb-${version}.jar" }     // the file name expected by publish/sign
}

// ---------------------------------------------------------------------------
// 3. Make sure every task that cares about the JAR sees the staged version.
//    â€¢ jar is still executed (keeps components.java happy), but the copy task
//      will overwrite its output afterwards.
// ---------------------------------------------------------------------------
tasks.named('jar') {
    finalizedBy 'stageNativeJar'            // run jar first, then overwrite
}

// All publish-to-Maven tasks must wait for the staged JAR
tasks.withType(PublishToMavenRepository).configureEach {
    dependsOn 'stageNativeJar'
}
// Metadata / POM generation tasks must wait as well
tasks.matching { it.name.startsWith('generate') && it.name.endsWith('Publication') }
      .configureEach { dependsOn 'stageNativeJar' }

// The generated signing task is created after evaluation; use task rules
tasks.matching { it.name == 'signMavenJavaPublication' }.configureEach {
    dependsOn 'stageNativeJar'
}


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    // classes produced by src/main/java
    integrationTestImplementation sourceSets.main.output
    // the staged, native-enabled JAR
    integrationTestImplementation files("native/surrealdb-${version}.jar")
}

jacoco {
    toolVersion = "0.8.12"
}

test {
    useJUnitPlatform()
    systemProperty 'java.library.path', file('target/debug').absolutePath
    testLogging {
        events "passed"
    }
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}

tasks.register('createCombinedReport') {
    dependsOn jacocoTestReport
    dependsOn javadoc

    doLast {
        // Copy the javadoc
        def javadocSource = file("build/docs/javadoc")
        def javadocDestination = file("build/reports/javadoc")
        // Ensure destination exists and copy
        delete javadocDestination  // Clean old docs if present
        mkdir javadocDestination
        copy {
            from javadocSource
            into javadocDestination
        }

        def indexFile = file("build/reports/index.html")
        indexFile.text = """
            <!DOCTYPE html>
            <html>
            <head>
                <title>Combined Test, Coverage, and Javadoc Report</title>
            </head>
            <body>
                <h1>Combined Test, Coverage, and Javadoc Report</h1>
                <ul>
                    <li><a href="./tests/test/index.html">Test Report</a></li>
                    <li><a href="./jacoco/test/html/index.html">JaCoCo Coverage Report</a></li>
                    <li><a href="./javadoc/index.html">Javadoc</a></li>
                </ul>
            </body>
            </html>
        """
    }
}


tasks.register('integrationTest', Test) {
    dependsOn 'stageNativeJar'
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    // use target/release for a release build
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = 'full'
        showCauses = true
        showStackTraces = true
    }
}

project.afterEvaluate {
    def key = System.getenv('SIGNING_KEY')
    def _pass = System.getenv('SIGNING_KEY_PASS')

    signing {
        useInMemoryPgpKeys(key, _pass)
        sign publishing.publications.mavenJava
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/surrealdb/surrealdb.java")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "OSSRH"
            def releasesRepoUrl = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            def snapshotsRepoUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.rootProject.name
            version = project.version

            from components.java

            pom {
                name = 'SurrealDB Driver'
                packaging = 'jar'
                description = 'The driver for accessing a SurrealDB instance.'
                url = 'https://surrealdb.com/docs/integration/libraries/java'

                scm {
                    connection = 'scm:git:git@github.com:surrealdb/surrealdb.java.git'
                    url = 'https://github.com/surrealdb/surrealdb.java'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'tobiemh'
                        name = 'Tobie Morgan Hitchcock'
                        email = 'tobie@surrealdb.com'
                    }
                    developer {
                        id = 'phughk'
                        name = 'Hugh Kaznowski'
                        email = 'hugh@surrealdb.com'
                    }
                    developer {
                        id = 'emmanuel-keller'
                        name = 'Emmanuel Keller'
                        email = 'emmanuel.keller@surrealdb.com'
                    }
                }
            }
        }
    }
}